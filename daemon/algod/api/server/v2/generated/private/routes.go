// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
